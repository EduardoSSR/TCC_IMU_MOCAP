#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Jun 16 03:51:48 2018

@author: eduardo-ssr
"""

import sys
import serial
import glob
import os
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec 
from drawnow import drawnow
from time import sleep

leitura1 = []
leitura2 = []
leitura3 = []
TempF = []
leitura4 = []
leitura5 = []
leitura6 = []
#fig, ax = plt.subplots()
plt.ion()

os.system('clear')
print ("======= List of USB devices =======")
serial_ports = glob.glob('/dev/ttyUSB*')
while(len(serial_ports)==0):
    print ("Connect the Arduino...")
    sleep(5);
    serial_ports = glob.glob('/dev/ttyUSB*')
        
for i in range(len(serial_ports)): 
    print (i, " - ", serial_ports[i])
    port = input("Choose the arduino port (e.g. 0): ")
        
ser = serial.Serial(serial_ports[int(port)], 115200)

contador = 0
eixo_x = 50

def makeFig():
     gs = gridspec.GridSpec(3, 3) #gridspec 3x3
     #Plot 1
     plt.subplot(gs[0, :])#posicao do subplot
     plt.ylim([-20000,20000])#valor min e max de y
     plt.title('Dados acelerometro')#titulo
     plt.grid(True)
     plt.ylabel('Acel X')#etiquetas do eixo y
     plt.plot(leitura1, 'ro-', label='Acel X') #plot de temperature
     plt.legend(loc='upper left')#plot da legenda
     plt2=plt.twinx()
     plt.ylim([-20000,20000])
     plt2.plot(leitura2, 'b^-', label='Acel Y')
     plt2.set_ylabel('Acel Y')
     plt2.ticklabel_format(useOffset=False)
     plt2.legend(loc='upper right')
     plt3=plt.twinx()
     plt.ylim([-20000,20000])
     plt3.plot(leitura3, 'g--' ,label='Acel Z')
     plt3.set_ylabel('Acel Z')
     plt3.ticklabel_format(useOffset=False)
     plt3.legend(loc='upper right')
     
     #Plot 2
     plt.subplot(gs[1, :])#posicao do subplot
     plt.ylim([-30,50])#valor min e max de y
     plt.title('Temperatura em Graus C')#titulo
     plt.grid(True)
     plt.ylabel('Temp-1 c')#etiquetas do eixo y
     plt.plot(TempF, 'ro-', label='temperatura em graus') #plot de temperature
     plt.legend(loc='upper left')#plot da legenda
     
     #Plot 1
     plt.subplot(gs[2, :])#posicao do subplot
     plt.ylim([-1000,1000])#valor min e max de y
     plt.title('Dados GiroscÃ³pio')#titulo
     plt.grid(True)
     plt.ylabel('Gyro X')#etiquetas do eixo y
     plt.plot(leitura4, 'ro-', label='Gyro X') #plot de temperature
     plt.legend(loc='upper left')#plot da legenda
     plt2=plt.twinx()
     plt.ylim([-1000,1000])
     plt2.plot(leitura5, 'b^-', label='Gyro Y')
     plt2.set_ylabel('Gyro Y')
     plt2.ticklabel_format(useOffset=False)
     plt2.legend(loc='upper right')
     plt3=plt.twinx()
     plt.ylim([-1000,1000])
     plt3.plot(leitura6, 'g--' ,label='Gyro Z')
     plt3.set_ylabel('Gyro Z')
     plt3.ticklabel_format(useOffset=False)
     plt3.legend(loc='upper right')
     
def main():
    global contador
    #ser.open()
    if ser.is_open:
        print("Established serial communication")
    else :
        print("Serial communication error")
    
    print("Pressione Ctrl+C para sair. ")
    sleep(5)
   # ax.clear()
    
    while(True):    
        
        line = ser.readline().decode("utf-8")
        sleep(0.05)
        print(line)
        
        entry = line.split("\t")
        AcX = np.float(entry[0])
        AcY = np.float(entry[1])
        AcZ = np.float(entry[2])
        temp = np.float(entry[3])
        Gx = np.float(entry[4])
        Gy = np.float(entry[5])
        Gz = np.float(entry[6])
        #print(AcX)
        
        leitura1.append(AcX) 
        leitura2.append(AcY)
        leitura3.append(AcZ)
        TempF.append(temp)
        leitura4.append(Gx)
        leitura5.append(Gy)
        leitura6.append(Gz)
#        ax.set_xlim([0,eixo_x])   #faixa do eixo horizontal
#        ax.set_ylim(-20000, 20000)
#        
#        ax.plot(leitura)
        drawnow(makeFig)
        plt.pause(.000005)     

        contador = contador + 1
    
        if (contador > eixo_x):
            leitura1.pop(0)
            leitura2.pop(0)
            leitura3.pop(0)
            TempF.pop(0)
            leitura4.pop(0)
            leitura5.pop(0)
            leitura6.pop(0)
            
            
if __name__ == "__main__":
    try:
        main()
    except (KeyboardInterrupt):
        print ("Voce pressionou Ctrl+C ou Delete para interromper este programa!")
#print(ser.name)         # check which port was really used
#ser.write(b'hello')     # write a string
#ser.close()      
